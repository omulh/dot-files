#! /bin/sh

# Get info on all the audio sources from pactl
pactlOutput=$(pactl -f json list sources)

# Get the ID for the available sources from pactl's output with jq
audioSourceIds=$(echo "$pactlOutput" | jq -r '.[]
    | select(.properties."media.class" == "Audio/Source")
    | select(.ports.[].availability == "available" or
    .ports.[].availability == "availability unknown")
    | .properties."object.id"')

# Make a list with the 'node.nicks' for all the found audio sources,
# use 'device.description' if the audio source has no 'node.nick'
audioSourceNames=""
while IFS= read id; do
    sourcePactlOutput=$(echo "$pactlOutput" | jq --arg id $id '.[]
        | select(.properties."object.id" == $id)')
    sourceName=$(echo "$sourcePactlOutput" | jq -r '.properties."node.nick"')
    [[ $sourceName == null ]] && sourceName=$(echo "$sourcePactlOutput" | jq -r '.properties."device.description"')
    audioSourceNames="$audioSourceNames$sourceName\n"
done <<< "$audioSourceIds"
audioSourceNames=$(echo -e "$audioSourceNames" | sed '$d')

# Get the 'node.nick' for the default source from wpctl inspect,
# and add a hint to it in the list of available sources.
# Use 'device.description' if the audio source has no 'node.nick',
defaultSourceName=$(wpctl inspect @DEFAULT_AUDIO_SOURCE@ | grep node.nick | cut -d\" -f2)
[[ -z $defaultSourceName ]] && defaultSourceName=$(wpctl inspect @DEFAULT_AUDIO_SOURCE@ | grep 'node.description' | cut -d\" -f2)
audioSourceNames=$(echo "$audioSourceNames" | sed "s/$defaultSourceName/& (Active)/")

# Get the length of the longest string
maxLen="0"
while IFS= read -r line; do
    [[ "${#line}" -gt "$maxLen" ]] && maxLen="${#line}"
done <<< "$audioSourceNames"
width=$((maxLen+=2))

# Create a fuzzel menu with the source names
fuzzelIdx=$(echo -e "$audioSourceNames" | fuzzel --dmenu --index --prompt '' --placeholder  "Select an input: "\
                                                 --horizontal-pad 15 --vertical-pad 15 --inner-pad 8\
                                                 --lines 4 --width $width)

# If a selection was made, use wpctl to change
# to the corresponding source, by using its ID
if [[ -n $fuzzelIdx ]]; then
    selectedSourceId=$(echo $audioSourceIds | cut -d' ' -f$((fuzzelIdx + 1)))
    wpctl set-default $selectedSourceId
fi

# Update the status of the keyboard's mic. status LED
if [[ $(wpctl get-volume @DEFAULT_AUDIO_SOURCE@) == *[MUTED]* ]]; then
    brightnessctl -d platform::micmute -q s 1
else
    brightnessctl -d platform::micmute -q s 0
fi
