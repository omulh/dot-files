#*----------------------*#
#*       lf's lfrc      *#
#*----------------------*#
# vim: ft=conf

### GENERAL SETTINGS ###

# Interpreter for shell commands
set shell sh

# Set '-eu' options for shell commands
# Option '-e' is used to exit on error
# Option '-u' is used to give error for unset variables
set shellopts '-eu'

# Set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx
set ifs "\n"

# Allow the use of the mouse
set mouse true

# Set the looks of the TUI
set icons true
set drawbox true
set roundbox true
set borderfmt "\033[30m"
set errorfmt "\033[7;31m"
set timefmt '_2 Jan 2006 15:04:05'
set tabstop 4
set statfmt "\033[7;36m %m \033[0m |\033[36m%p\033[0m| %c| %u| %g| %S| %t| -> %l"
set rulerfmt "%a| %p| \033[7;31m %m \033[0m| \033[7;33m %c \033[0m| \033[7;35m %s \033[0m| \033[7;36m %v \033[0m| \033[7;34m filter: %f \033[0m| %i/%t"

# Set a new previewer
set previewer ~/.config/lf/previewer
set cleaner ~/.config/lf/cleaner

# Leave some space at the top and bottom when scrolling
set scrolloff 4

# Allow incremental search and filtering
set incsearch true
set incfilter true

# Use regex for search and filter
set filtermethod regex
set searchmethod regex

# Use smartcase when searching
set ignorecase true
set smartcase true


### COMMANDS SETTINGS ###

# REMOVE DEFAULT COMMANDS
cmd open

# DEFINE NEW COMMANDS
# Reload the lf configuration file
cmd configReload $lf -remote "send $id source \"$HOME/.config/lf/lfrc\""

# Set terminal window title incl. nested session info
cmd setWindowTitle &{{
    bash -c '
    printf "\033]0;$(dirs) [lf]\007" > /dev/tty
    '
}}

# Set lf's promt incl. git info
cmd setPrompt &{{
    bash -c '
    fmt=''
    if [[ $LF_LEVEL != 1 ]]; then
        fmt+="\033[2;37m["         # dim white opening bracket
        fmt+="\033[0;33mnested lf" # dim orange nested lf status
        fmt+="\033[2;37m] "        # dim white closing bracket
    fi
    fmt+="\033[2;37m["   # dim white opening bracket
    fmt+="\033[0;36m%u " # cyan current user
    fmt+="\033[2;35m%d"  # dim magenta curr. dir
    fmt+="\033[0;35m%f"  # magenta highlighted file
    fmt+="\033[2;37m] "  # dim white closing bracket
    gitPromptFile=/usr/share/git/git-prompt.sh
    if [[ -r $gitPromptFile ]]; then
        source $gitPromptFile
        fmt+="\033[2;37m$(__git_ps1 "[")"    # opening bracket
        fmt+="\033[0;32m$(__git_ps1 "Óú• %s")" # green git branch
        fmt+="\033[2;37m$(__git_ps1 "]")"    # closing bracket
    fi
    fmt+="\033[0m"        # reset color and format
    lf -remote "send $id set promptfmt \"$fmt\""
    '
}}

# Set a new default application for a file's mime type
cmd newOpener &{{
    set +e
    mimeType=$(mime-type-query -q "$f")
    fileName="$1.desktop"
    mime-default-set -qf "$fileName" "$mimeType"
    if [[ $? -eq 0 ]]; then
        lf -remote "send $id %echo -e \"\033[1;7;32m$fileName\033[0;7;32m is the new default for \033[1m$mimeType\033[0;7;32m files\033[0m\""
    else
        lf -remote "send $id %echo -e \"\033[7;31mOperation failed\033[0m\""
    fi
}}

# Get info on the default app for a given file
cmd openInfo &{{
    set +e

    mimeType=$(mime-type-query -q "$f")
    if [[ $? -ne 0 ]]; then
        lf -remote "send $id %echo -e \"\033[7;31m Error while querying mime type \033[0m\""
        exit
    fi

    defaultApp=$(mime-default-query -q -o '{appname}' "$mimeType")
    if [[ $? -ne 0 ]]; then
        lf -remote "send $id %echo -e \"\033[7;31m Error while querying default app \033[0m\""
    fi

    if [[ -n $defaultApp ]]; then
        lf -remote "send $id %echo -e \"\033[1;7;35m $mimeType\033[0;7;35m files are opened with \033[1;7;35m$defaultApp \033[0m\""
    else
        lf -remote "send $id %echo -e \"\033[7;33m No default set for \033[1m$mimeType\033[0;7;33m files \033[0m\""
    fi
}}

# Open files with the default app
cmd openMime &{{
    set +e

    mime-open -q "$f"

    case $? in
        0)
            exit ;;
        5)
            lf -remote "send $id %echo -e \"\033[7;33m No default app set for this file's mime type \033[0m\"" ;;
        *)
            lf -remote "send $id %echo -e \"\033[7;31m Operation failed \033[0m\"" ;;
    esac
}}

# Interactive ripgrep and select a file
cmd fzfRipgrep ${{
    set +eu

    RELOAD='reload:rg --column --color=always --smart-case {q} || :'
    ACTION='echo {1}'

    fileSelection=$(
        fd . --hidden --no-ignore-vcs --base-directory "$PWD" | \
        fzf --disabled --ansi --no-multi \
            --border-label " Grep files in $PWD üìÇ " \
            --preview-window '+{2}/2,right,50%,hidden' \
            --bind 'ctrl-p:change-preview-window(nohidden|down,border-top|)' \
            --bind "start:$RELOAD" --bind "change:$RELOAD" \
            --bind "enter:become:$ACTION" \
            --preview '$HOME/.vim/plugged/fzf.vim/bin/preview.sh {}' \
            --delimiter :
    )

    case $? in
        0)
            fileName=$(basename "$fileSelection")
            fileDir=$(dirname "$fileSelection")

            [[ $fileName == .* ]] && lf -remote "send $id set hidden"

            lf -remote "send $id cd \"$fileDir\""
            lf -remote "send $id select \"$fileName\""
            ;;
        2 | 126 | 127)
            lf -remote "send $id %echo -e \"\033[7;31m Operation failed \033[0m\""
            ;;
    esac
}}

# Fuzzy find and select a file
cmd fzfFind ${{
    set +eu
    case "$1" in
        'HOME')
            dir="$HOME" ;;
        'ROOT')
            dir="/" ;;
        *)
            dir="$PWD" ;;
    esac
    label=" Search files in $dir üìÅ "

    fileSelection=$(
        fd . --hidden --no-ignore-vcs --base-directory "$dir" | \
        fzf --no-multi --border-label "$label" \
            --preview-window 'right,50%,hidden' \
            --bind 'ctrl-p:change-preview-window(nohidden|down,border-top|)' \
            --preview '$HOME/.vim/plugged/fzf.vim/bin/preview.sh {}' \
    )

    case $? in
        0)
            if [[ $dir == / ]]; then
                file="$dir$fileSelection"
            else
                file="$dir/$fileSelection"
            fi
            fileName=$(basename "$file")
            fileDir=$(dirname "$file")

            [[ $fileName == .* ]] && lf -remote "send $id set hidden"

            lf -remote "send $id cd \"$fileDir\""
            lf -remote "send $id select \"$fileName\""
            ;;
        1)
            lf -remote "send $id %echo -e \"\033[7;33m No match found \033[0m\""
            ;;
        2 | 126 | 127)
            lf -remote "send $id %echo -e \"\033[7;31m Operation failed \033[0m\""
            ;;
    esac
}}

# Go to the location pointed by a symlink
cmd followLink %{{
    lf -remote "send $id select '$(readlink $f)'"
}}

# Select dirs. in the current directory
cmd selectDirs &{{
    lf -remote "send $id unselect"

    if [[ $lf_hidden == false ]]; then
        fd --type dir --max-depth 1 --no-hidden --no-ignore --print0
    else
        fd --type dir --max-depth 1 --hidden --no-ignore --print0
    fi |
    sed 's/ /\\ /g' |
    xargs -0 -I{} lf -remote "send $id toggle {}"
}}

# Select files in the current directory
cmd selectFiles &{{
    lf -remote "send $id unselect"

    if [[ $lf_hidden == false ]]; then
        fd --type file --max-depth 1 --no-hidden --no-ignore --print0
    else
        fd --type file --max-depth 1 --hidden --no-ignore --print0
    fi |
    sed 's/ /\\ /g' |
    xargs -0 -I{} lf -remote "send $id toggle {}"
}}

# Extract the contents of an archive file in a new dir.
cmd extractInNewDir &{{
    set -f
    case $f in
        *.7z|*.zip|*.gz|*.bz|*.bz2|*.rar)
            dirPath=${f%.*}
            mkdir -p $dirPath
            dir=${dirPath##*/}
            7z x -o$dir "$f"
            ;;
        *)
            lf -remote "send $id %echo -e \"\033[7;31m Wrong or unsupported format \033[0m\""
            ;;
    esac
}}

# Extract the contents of an archive file on the current dir.
cmd extractAsIs &{{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2)
            tar xjvf $f
            ;;
        *.tar.gz|*.tgz)
            tar xzvf $f
            ;;
        *.tar.xz|*.txz)
            tar xJvf $f
            ;;
        *.7z|*.zip|*.gz|*.bz|*.bz2|*.rar)
            7z x "$f"
            ;;
        *)
            lf -remote "send $id %echo -e \"\033[7;31m Wrong or unsupported format \033[0m\""
            ;;
    esac
}}

# Create nested dirs. and select the created (parent) dir.
cmd mkdir %{{
    mkdir -p "$1"
    if [[ $? -eq 0 ]]; then
        parentDir=${1%%/*}
        lf -remote "send $id select \"$parentDir\""
    fi
}}

# Compress files with 7z
cmd mkzip &{{
    set -f

    mkdir "$1"
    cp -r $fx "$1"
    7z a "$1.zip" "$1"
    rm -rf "$1"
}}

# DEFINE LF SPECIAL COMMANDS
# Change the panes' ratios and enable or disable the
# preview pane based on the current ui's width
cmd on-redraw &{{
    if [ $lf_width -le 80 ]; then
        lf -remote "send $id set ratios 2:3"
        lf -remote "send $id set preview false"
    else
        lf -remote "send $id set ratios 1:2:3"
        lf -remote "send $id set preview true"
    fi
}}

# Change the cursor format when lf loses focus
cmd on-focus-lost :{{
    set cursorparentfmt ""
    set cursoractivefmt ""
    set cursorpreviewfmt ""
}}

# Change the cursor format when lf gains focus
cmd on-focus-gained :{{
    set cursorparentfmt "\033[7m"
    set cursoractivefmt "\033[4;7m"
    set cursorpreviewfmt "\033[7m"
}}

# Update the prompt and window title on dir. change
cmd on-cd :{{
    setWindowTitle
    setPrompt
}}

# Update cursor format, prompt and window title on init
cmd on-init :{{
    on-focus-gained
    setWindowTitle
    setPrompt
}}


### MAPPINGS SETTINGS ###

# Remove all mappings (normal and visual modes)
clearmaps

# NEW NORMAL/VISUAL MODE MAPPINGS
# General commands
map 'q' quit
map '<f-1>' help
map ':' read
map '<c-r>' :reload; redraw

# Shell commands
map '$' shell
map '<enter>' shell
map '!' shell-wait
map '%' shell-pipe
map '&' shell-async
map 'w' $$SHELL; lf -remote "send $id setWindowTitle"

# Change file sorting
map 'se' :set sortby ext; set info
map 'sn' :set sortby natural; set info
map 'ss' :set sortby size; set info size
map 'st' :set sortby time; set info time
map 'sa' :set sortby atime; set info atime
map 'sc' :set sortby ctime; set info ctime
map 'sr' :set reverse!

# Change the displayed info
map 'zn' set info
map 'zs' set info size
map 'zt' set info time
map 'za' set info size:time
map 'zc' set dircounts!
map 'zd' calcdirsize

# Same-dir. navigation
map 'n' down
map '<down>' down
map '<m-down>' down
map 'e' up
map '<up>' up
map '<m-up>' up
map '<c-y>' scroll-up
map '<c-u>' half-up
map '<c-b>' page-up
map '<pgup>' page-up
map '<home>' top
map 'gg' top
map '<c-e>' scroll-down
map '<c-d>' half-down
map '<c-f>' page-down
map '<pgdn>' page-down
map '<end>' bottom
map 'G' bottom

# NEW NORMAL MODE MAPPINGS
# Intra-dir. navigation
nmap 'm' updir
nmap '<left>' updir
nmap 'i' open
nmap '<right>' open
nmap 'gh' cd ~
nmap 'gm' cd /run/media
nmap 'gr' cd /
nmap 'gl' followLink
nmap 'k' mark-save
nmap 'K' mark-remove
nmap "'" mark-load

# Change file visibility
nmap 'fh' set hidden!
nmap 'ff' find
nmap 'fs' filter
nmap 'fr' setfilter ''

# Search and find files
nmap '/' search
nmap '?' search-back
nmap 'j' search-next
nmap 'J' search-prev
nmap ',fg' fzfRipgrep
nmap ',ff' fzfFind HOME
nmap ',fr' fzfFind ROOT
nmap ',/' fzfFind

# File and dir. commands
nmap 'd' cut
nmap 'p' paste
nmap 'y' copy
nmap 'c' clear
nmap 'D' delete
nmap 'R' rename
nmap 'om' openMime
nmap 'or' $vimless $fx; lf -remote "send $id setWindowTitle"
nmap 'oe' $$EDITOR $fx; lf -remote "send $id setWindowTitle"
nmap 'oE' $sudoedit $fx; lf -remote "send $id setWindowTitle"
nmap 'ow' :push :newOpener<space>
nmap 'oi' openInfo
nmap 'ad' :push :mkdir<space>
nmap 'az' :push :mkzip<space>
nmap 'xa' extractAsIs
nmap 'xd' extractInNewDir

# Selection operations
nmap '<space>' :toggle; down
nmap 'u' unselect
nmap 'va' :unselect; invert
nmap 'vd' selectDirs
nmap 'vf' selectFiles
nmap 'vi' invert
nmap 'vv' visual
nmap 'V' visual

# NEW VISUAL MODE MAPPINGS
vmap '<space>' visual-accept
vmap 'o' visual-change
vmap 'u' visual-unselect
vmap 'vv' visual-discard
vmap 'V' visual-discard
vmap '<esc>' visual-discard
