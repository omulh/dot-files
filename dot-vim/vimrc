"*--------------------*#
"*     vim's vimrc    *#
"*--------------------*#

" Use Vim settings, rather than Vi settings
set nocompatible

" Specify a new location for the viminfo file
set viminfofile=~/.vim/viminfo

" Define what is stored in the viminfo file
set viminfo='10,<50,s10,h


""" TERMINAL OPTIONS

" Change the cursor shape to:
" Blinking beam when entering insert mode
let &t_SI = "\e[5 q"
" Blinking underline when entering replace mode
let &t_SR = "\e[3 q"
" Solid block when exiting insert or replace modes
let &t_EI = "\e[2 q"


""" PLUGINS MANAGED BY VIM-PLUG

call plug#begin()

" Fuzzy search files and their contents
"Plug 'junegunn/fzf' " Not needed for pacman's vim
Plug 'junegunn/fzf.vim'

" Replace existing text with the contents of a register
Plug 'inkarkat/vim-ReplaceWithRegister'

" Commenting / uncommenting
Plug 'tpope/vim-commentary'

" Remove, change, insert and auto close surrounding pair charaters
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'

" 'Smarter' joining of lines with that have
" continuation characters and string literals
Plug 'flwyd/vim-conjoin'

" Allow repeating vim-surround, vim-conjoin and
" vim-ReplaceWithRegister commands with . (dot)
Plug 'tpope/vim-repeat'

call plug#end()
" Note: plug#end() sets the following:
" filetype plugin indent on
" syntax enable


""" FZF SETTINGS
" Change some default options
let $FZF_DEFAULT_OPTS .= ' --margin=0'

" Define the window layout
" - Popup window (center of the screen)
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.75 } }

" Extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }


""" FZF.VIM PLUGIN SETTINGS
" Change the default Files command
command! -bang -nargs=? -complete=dir Files execute 'call fzf#vim#files(' .
      \ string(<q-args>) .
      \ ', {"options": ["--prompt=Óöè ", "--border-label= Search files in ' .
      \ fnamemodify(<q-args>, ":p:h") . ' üìÅ "]}, ' .
      \ (<bang>0) . ')'

" Change the default Rg command
command! -bang -nargs=* Rg execute 'call fzf#vim#grep(' .
      \ '"rg --column --line-number --no-heading --color=always --smart-case -- ".' .
      \ string(fzf#shellescape(<q-args>)) .
      \ ', {"options": ["--prompt=Óöè ", "--border-label= Grep ' .
      \ string(<q-args>) . ' in ' .
      \ fnamemodify(<q-args>, ":p:h") . ' üìÇ "]}, ' .
      \ (<bang>0) . ')'

" Change the default RG command
command! -bang -nargs=* RG execute 'call fzf#vim#grep2(' .
      \ '"rg --column --line-number --no-heading --color=always --smart-case -- ", ' .
      \ string(<q-args>) .
      \ ', {"options": ["--prompt=Óöè ", "--border-label= Grep files in ' .
      \ fnamemodify(<q-args>, ":p:h") . ' üìÇ "]}, ' .
      \ (<bang>0) . ')'


""" SURROUND.VIM PLUGIN SETTINGS
let g:surround_no_insert_mappings = 1


""" AUTO-PAIRS PLUGIN SETTINGS
" Disable some default options
let g:AutoPairsFlyMode = 0
let g:AutoPairsMultilineClose = 0
let g:AutoPairsCenterLine = 0

" Disable the keyboard mappings
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutFastWrap = ''
let g:AutoPairsShortcutJump = ''
let g:AutoPairsShortcutBackInsert = ''


""" NEW KEYBOARD MAPPINGS

" Use comma as leader key
let mapleader = ","

" Tab management
nnoremap <leader>t :tabnew<CR>
nnoremap <leader>j :tabp<CR>
nnoremap <leader>y :tabn<CR>

" Window management
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :q!<CR>
nnoremap <leader>wv :vs<CR>
nnoremap <leader>ws :sp<CR>
nnoremap <leader>we :winc =<CR>
nnoremap <leader>ww :winc w<CR>
nnoremap <leader>wx :winc x<CR>
nnoremap <leader>wt :winc T<CR>
nnoremap <leader>wdt :windo difft<CR>
nnoremap <leader>wdo :windo diffo<CR>

" Buffer management
nnoremap <leader>e :enew<CR>
nnoremap <leader>bw :w<CR>
nnoremap <leader>a :b#<CR>
nnoremap <leader>i :bn<CR>
nnoremap <leader>m :bp<CR>
nnoremap <leader>d :bd<CR>
nnoremap <leader>D :bd!<CR>

" Show and list vim elements
nnoremap <leader>r :reg<CR>
nnoremap <leader>p :echo getcwd()<CR>
nnoremap <leader>bb :Buffers<CR>
nnoremap <leader>lm :Maps<CR>
nnoremap <leader>l' :Marks<CR>
nnoremap <leader>lo :Jumps<CR>
nnoremap <leader>lu :Changes<CR>
nnoremap <leader>hb :History<CR>
nnoremap <leader>h. :History:<CR>
nnoremap <leader>h/ :History/<CR>
nnoremap <leader>hh :Helptags<CR>

" Misc
nnoremap <silent> <leader>n :noh<CR>
nnoremap <silent> <leader>c :call system("wl-copy", @")<CR> \| :echom 'Copied to system clipboard'<CR>

" fzf commands
nnoremap <silent> <leader>gd yiw:Rg "<CR>
nnoremap <silent> <leader>fg :RG<CR>
nnoremap <silent> <leader>ff :Files ~<CR>
nnoremap <silent> <leader>fr :Files /<CR>
nnoremap <silent> <leader>/ :Files<CR>


""" GENERAL SETTINGS

" Enable file type detection and allow to load plugin
" and indent files based on the file type detected
filetype plugin indent on

" Enable the use of mouse in N, V and I modes
if has('mouse')
    set mouse=nvi
endif

" Lines of command line history to keep
set history=20

" Time out for mappings and key codes
set timeout timeoutlen=1000
set ttimeout ttimeoutlen=100


""" LOOKS AND DISPLAY SETTINGS

" Set a window title
set title titlestring=%t\ [vim]

" Set a color theme
if (has("termguicolors"))
    set termguicolors
endif
colorscheme nord

" Switch syntax highlighting on
syntax on

" Show hybrid line numbers
set number
set relativenumber

" Hightlight the current line
set cursorline

" Show a few lines of context around the cursor
set scrolloff=6
" Show @@@ in the last line if it is truncated
set display=truncate
" Do not wrap long lines
set nowrap

" Do not jump to the matching item when inserting a bracket, paren, etc.
set noshowmatch

" Set status line to always show and set its contents
set laststatus=2
set statusline=
set statusline+=\ %F        " file name
set statusline+=\ %m%r      " modified flag, readonly flag
set statusline+=%y[%{&ff}]  " file type and file format (dos/unix)
set statusline+=%=          " make new alignment section
set statusline+=%l/%L,\ %c  " line number/total number of lines, column number
set statusline+=\ (%P)      " relative position in document

" Display command completion matches
set wildmenu
set wildmode=longest,list
" Ignore case when completting commands
set wildignorecase
" Show partial commands in last line
set showcmd

" Disable terminal beep or flash bells
set vb t_vb=

" Set default size when opening a terminal window
set termwinsize=12x0
" When splitting horizontally, open new windows below by default
set splitbelow
" When splitting vertically, open new windows on the right by default
set splitright


""" SEARCH SETTINGS

" Ignore case when searching for all lower case letters
set ignorecase
" Do not ignore case when the search includes upper case letters
set smartcase
" Do incremental searching
set incsearch
" Show the number of search matches
set shortmess-=S

" Highlight all matching search items
set hlsearch


""" EDITING SETTINGS

" In insert mode, allow backspacing over indents, line breaks
" and the start of the insert (stopping once for C-W and C-U)
set backspace=indent,eol,start

" Set the default tab width
set tabstop=4
set shiftwidth=4
" Use spaces instead of tabs
set expandtab

" Automatically format text when editing,
" inserting and joining comment lines
set textwidth=70
set formatoptions=croql1j


""" MISCELLANEOUS

" Define function which is called when using the less.vim pager script
function LessInitFunc()
    set laststatus=0
    set rulerformat=%=%l/%L
    set nonu
    set nornu
    set nocursorline
endfunction
